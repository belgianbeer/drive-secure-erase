#! /bin/sh
#
#  drive-secure-erase - Erase all user data on the drive.
#
#  Copyright (c) 2023 Masato Minda
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.

#  $Id: drive-secure-erase,v 1.7 2024/02/01 22:30:26 minmin Exp $

#
#  WARNING!! WARNING!! WARNING!! WARNING!! WARNING!! WARNING!! WARNING!!
#
#  This command is very dangerous. Because it will ERASE ALL DATA on the
#  SSD in a few seconds. HDD takes several hours to erase. There is no
#  way to recover the data erased by this command.
# 
#  When this command is used against an SSD drive all its cells will be
#  marked as empty, restoring it to factory default write performance.
#
#  WARNING!! WARNING!! WARNING!! WARNING!! WARNING!! WARNING!! WARNING!!
#

#  about Security Erase (in Japanese)
#   https://wiki.ninth-nine.com/FreeBSD/camcontrol%20security
#   https://wiki.archlinux.jp/index.php/ソリッドステートドライブ/メモリセルの消去

#  FreeBSD
#
#  $ camcontrol security XX
#  pass2: <INTEL SSDSC2CW120A3 400i> ACS-2 ATA SATA 3.x device
#  pass2: 400.000MB/s transfers
#
#  Security Option           Value
#  supported                 yes
#  enabled                   no
#  drive locked              no
#  security config frozen    no
#  count expired             no
#  security level            high
#  enhanced erase supported  yes
#  erase time                4 min
#  enhanced erase time       2 min
#  master password rev       fffe

#  Linux
#  $ hdparm --security-erase /dev/sdX

temp=$(mktemp /tmp/_ata_erase_XXXXXXX)
trap "rm -f ${temp}" 0 1 2 3 5 15

u=user
p=pass

#  ----- get_secureinfo -----
#
__get_secureinfo_FreeBSD () {
	camcontrol security ${1} > ${temp} || exit
}
__get_secureinfo_Linux () {
	hdparm -I ${1} | sed -e '/^Standards:/,/^Security:/c\
\
Security:' -e '/^Logical /,$d' > ${temp} || exit
}

#  --------------------------------------------------
__is_supported_FreeBSD () {
	[ "$(sed -n -e '/^supported  */s///p' $temp)" = yes ]
}
__is_supported_Linux () {
	grep -q '^[ 	]*supported$' ${temp}
}
#  --------------------------------------------------
__is_enhance_FreeBSD () {
	[ "$(sed -n -e '/^enhanced erase supported  */s///p' $temp)" = yes ]
}
__is_enhance_Linux () {
	grep -q '^[ 	]*supported: enhanced erase$' ${temp}
}
#  --------------------------------------------------
__is_frozen_FreeBSD () {
	[ "$(sed -n -e '/^security config frozen  */s///p' $temp)" = yes ]
}
__is_frozen_Linux () {
	grep -q '^[ 	]*frozen$' ${temp}
}
#  --------------------------------------------------
__is_enabled_FreeBSD () {
	[ "$(sed -n -e '/^enabled  */s///p' $temp)" = yes ]
}
__is_enabled_Linux () {
	grep -q '^[ 	]*enabled$' ${temp}
}
#  --------------------------------------------------
__is_locked_FreeBSD () {
	[ "$(sed -n -e '/^drive locked  */s///p' $temp)" = yes ]
}
__is_locked_Linux () {
	grep -q '^[ 	]*locked$' ${temp}
}
#  --------------------------------------------------
__do_enable_FreeBSD () {
	(set -x; camcontrol security ${1} -U ${u} -s ${p})
}
__do_enable_Linux () {
	(set -x; hdparm --user-master ${u} --security-set-pass ${p} ${1})
}
#  --------------------------------------------------
__do_disable_FreeBSD () {
	(set -x ; camcontrol security ${1} -U ${u} -d ${p})
}
__do_disable_Linux () {
	(set -x; hdparm --user-master ${u} --security-disable ${p} ${1})
}
#  --------------------------------------------------
__do_unlock_FreeBSD () {
	(set -x ; camcontrol security ${1} -U ${u} -k ${p})
}
__do_unlock_Linux () {
	(set -x; hdparm --user-master ${u} --security-unlock ${p} ${1})
}
#  --------------------------------------------------
__do_erase_FreeBSD () {
	grep '^erase time' ${temp} >&2
	(set -x; camcontrol security ${1} -U ${u} -e ${p} -y)
}
__do_erase_Linux () {
	echo >&2
	grep 'ERASE UNIT' ${temp} >&2
	(set -x; hdparm --user-master ${u} --security-erase ${p} ${1})
}
#  --------------------------------------------------
__do_enhance_FreeBSD () {
	grep '^enhanced erase time' ${temp} >&2
	(set -x; camcontrol security ${1} -U ${u} -h ${p} -y)
}
__do_enhance_Linux () {
	echo >&2
	grep 'ERASE UNIT' ${temp} >&2
	(set -x; hdparm --user-master ${u} --security-erase-enhanced ${p} ${1})

}
#  --------------------------------------------------

__ready_check () {
	local _ok=0

	if ! ${is_supported} ; then
		echo >&2
		echo '***' ${1} is not supported >&2
		exit 1
	else
		_ok=1
	fi

	if ${is_frozen} ; then
		echo >&2
		echo '***' ${1} is frozen. Secure erase not possible. >&2
		exit 1
	else
		_ok=$((_ok + 1))
	fi

	if [ x${2} = xverbose ] && [ ${_ok} = 2 ]; then
		echo
		echo '***' ${1} is ready for secure erase.
	fi
}

__drive_erase () {
	local _enhanced

	__ready_check ${1}

	if [ "${2}" = enhance ] && ${is_enhance}; then
		_enhanced=yes
	else
		_enhanced=no
	fi

	if ! ${is_enabled} ; then
		${do_enable} ${1}
	fi

	if [ ${_enhanced} = yes ]; then
		${do_enhance} ${1}
	else
		${do_erase} ${1}
	fi
}

__drive_unlock () {
	if ${is_locked} ; then
		${do_unlock} ${1}
	fi
	if ${is_enabled} ; then
		${do_disable} ${1}
	fi
}

# ----- main ------
#
os_type=$(uname -s)
get_secureinfo=__get_secureinfo_${os_type}
is_supported=__is_supported_${os_type}
is_enhance=__is_enhance_${os_type}
is_frozen=__is_frozen_${os_type}
is_enabled=__is_enabled_${os_type}
is_locked=__is_locked_${os_type}
do_enable=__do_enable_${os_type}
do_disable=__do_disable_${os_type}
do_unlock=__do_unlock_${os_type}
do_erase=__do_erase_${os_type}
do_enhance=__do_enhance_${os_type}

if [ -z "${1}" ]; then
	echo "Usage: ${0##*/} drive [yes|unlock]" >&2
	exit 1
fi

$get_secureinfo ${1}

case "x${2}" in

xyes|xenhance)
	__drive_erase ${1} ${2}
	;;
xunlock)
	__drive_unlock ${1}
	;;
x)
	cat ${temp}
	__ready_check ${1} verbose
esac
